// Code generated by musgen-go. DO NOT EDIT.

package access

import (
	"github.com/mus-format/mus-go/ord"
	"github.com/mus-format/mus-go/varint"
)

var (
	mapef9EiLdZA6YVYZ3ΔLGamIAΞΞ = ord.NewMapSer[string, string](ord.String, ord.String)
)

var CompactPayloadMUS = compactPayloadMUS{}

type compactPayloadMUS struct{}

func (s compactPayloadMUS) Marshal(v CompactPayload, bs []byte) (n int) {
	n = varint.Int16.Marshal(v.I0, bs)
	n += varint.Int16.Marshal(v.I1, bs[n:])
	n += varint.Int16.Marshal(v.I2, bs[n:])
	n += varint.Int16.Marshal(v.I3, bs[n:])
	n += varint.Int16.Marshal(v.I4, bs[n:])
	n += ord.Bool.Marshal(v.F0, bs[n:])
	n += ord.Bool.Marshal(v.F1, bs[n:])
	n += ord.Bool.Marshal(v.F2, bs[n:])
	n += ord.Bool.Marshal(v.F3, bs[n:])
	n += ord.Bool.Marshal(v.F4, bs[n:])
	n += ord.String.Marshal(v.L0, bs[n:])
	n += ord.String.Marshal(v.L1, bs[n:])
	n += ord.String.Marshal(v.L2, bs[n:])
	n += ord.String.Marshal(v.L3, bs[n:])
	n += ord.String.Marshal(v.L4, bs[n:])
	n += ord.ByteSlice.Marshal(v.R0, bs[n:])
	n += ord.ByteSlice.Marshal(v.R1, bs[n:])
	n += ord.ByteSlice.Marshal(v.R2, bs[n:])
	n += ord.ByteSlice.Marshal(v.R3, bs[n:])
	n += ord.ByteSlice.Marshal(v.R4, bs[n:])
	return n + mapef9EiLdZA6YVYZ3ΔLGamIAΞΞ.Marshal(v.M, bs[n:])
}

func (s compactPayloadMUS) Unmarshal(bs []byte) (v CompactPayload, n int, err error) {
	v.I0, n, err = varint.Int16.Unmarshal(bs)
	if err != nil {
		return
	}
	var n1 int
	v.I1, n1, err = varint.Int16.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.I2, n1, err = varint.Int16.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.I3, n1, err = varint.Int16.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.I4, n1, err = varint.Int16.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.F0, n1, err = ord.Bool.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.F1, n1, err = ord.Bool.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.F2, n1, err = ord.Bool.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.F3, n1, err = ord.Bool.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.F4, n1, err = ord.Bool.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.L0, n1, err = ord.String.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.L1, n1, err = ord.String.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.L2, n1, err = ord.String.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.L3, n1, err = ord.String.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.L4, n1, err = ord.String.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.R0, n1, err = ord.ByteSlice.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.R1, n1, err = ord.ByteSlice.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.R2, n1, err = ord.ByteSlice.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.R3, n1, err = ord.ByteSlice.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.R4, n1, err = ord.ByteSlice.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.M, n1, err = mapef9EiLdZA6YVYZ3ΔLGamIAΞΞ.Unmarshal(bs[n:])
	n += n1
	return
}

func (s compactPayloadMUS) Size(v CompactPayload) (size int) {
	size = varint.Int16.Size(v.I0)
	size += varint.Int16.Size(v.I1)
	size += varint.Int16.Size(v.I2)
	size += varint.Int16.Size(v.I3)
	size += varint.Int16.Size(v.I4)
	size += ord.Bool.Size(v.F0)
	size += ord.Bool.Size(v.F1)
	size += ord.Bool.Size(v.F2)
	size += ord.Bool.Size(v.F3)
	size += ord.Bool.Size(v.F4)
	size += ord.String.Size(v.L0)
	size += ord.String.Size(v.L1)
	size += ord.String.Size(v.L2)
	size += ord.String.Size(v.L3)
	size += ord.String.Size(v.L4)
	size += ord.ByteSlice.Size(v.R0)
	size += ord.ByteSlice.Size(v.R1)
	size += ord.ByteSlice.Size(v.R2)
	size += ord.ByteSlice.Size(v.R3)
	size += ord.ByteSlice.Size(v.R4)
	return size + mapef9EiLdZA6YVYZ3ΔLGamIAΞΞ.Size(v.M)
}

func (s compactPayloadMUS) Skip(bs []byte) (n int, err error) {
	n, err = varint.Int16.Skip(bs)
	if err != nil {
		return
	}
	var n1 int
	n1, err = varint.Int16.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int16.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int16.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int16.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.Bool.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.Bool.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.Bool.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.Bool.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.Bool.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.String.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.String.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.String.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.String.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.String.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.ByteSlice.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.ByteSlice.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.ByteSlice.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.ByteSlice.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.ByteSlice.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = mapef9EiLdZA6YVYZ3ΔLGamIAΞΞ.Skip(bs[n:])
	n += n1
	return
}
